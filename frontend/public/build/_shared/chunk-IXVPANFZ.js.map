{
  "version": 3,
  "sources": ["../../../app/utils/api.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\utils\\\\api.ts\"\n);\nimport.meta.hot.lastModified = \"1758248457339.6526\";\n}\n// REMIX HMR END\n\nconst API_BASE_URL = \"http://localhost:8000\";\r\n\r\nexport interface UploadResponse {\r\n  filename: string;\r\n  file_path: string;\r\n  size: number;\r\n  content_type: string;\r\n}\r\n\r\nexport interface ProcessingRequest {\r\n  model_name: string;\r\n  enhance_quality: boolean;\r\n  noise_reduction: boolean;\r\n  pitch_shift?: number;\r\n}\r\n\r\nexport interface ProcessingStatus {\r\n  task_id: string;\r\n  status: \"processing\" | \"completed\" | \"failed\";\r\n  progress: number;\r\n  message: string;\r\n  result_file?: string;\r\n}\r\n\r\nexport interface Model {\r\n  name: string;\r\n  path: string;\r\n  size: number;\r\n}\r\n\r\nexport interface VoiceModel {\r\n  id: string;\r\n  name: string;\r\n  character: string;\r\n  description: string;\r\n  download_url: string;\r\n  huggingface_url: string;\r\n  model_url: string;\r\n  size: string;\r\n  epochs: number;\r\n  type: string;\r\n  tags: string[];\r\n}\r\n\r\nexport interface VoiceModelsResponse {\r\n  success: boolean;\r\n  models: VoiceModel[];\r\n  count: number;\r\n}\r\n\r\nexport interface SearchResponse extends VoiceModelsResponse {\r\n  query: string;\r\n}\r\n\r\nexport interface CategoriesResponse {\r\n  success: boolean;\r\n  categories: {\r\n    gender: string[];\r\n    age: string[];\r\n    style: string[];\r\n    language: string[];\r\n    character_type: string[];\r\n  };\r\n  all_tags: string[];\r\n}\r\n\r\nclass ApiClient {\r\n  private baseUrl: string;\r\n\r\n  constructor(baseUrl: string = API_BASE_URL) {\r\n    this.baseUrl = baseUrl;\r\n  }\r\n\r\n  private async request<T>(\r\n    endpoint: string,\r\n    options: RequestInit = {}\r\n  ): Promise<T> {\r\n    const url = `${this.baseUrl}${endpoint}`;\r\n    \r\n    const response = await fetch(url, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`API request failed: ${response.statusText}`);\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  async uploadAudio(file: File): Promise<UploadResponse> {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n\r\n    const response = await fetch(`${this.baseUrl}/upload`, {\r\n      method: \"POST\",\r\n      body: formData,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Upload failed: ${response.statusText}`);\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  async getModels(): Promise<{ models: Model[] }> {\r\n    return this.request<{ models: Model[] }>(\"/models\");\r\n  }\r\n\r\n  async processAudio(\r\n    filename: string,\r\n    request: ProcessingRequest\r\n  ): Promise<{ task_id: string; status: string }> {\r\n    return this.request<{ task_id: string; status: string }>(\r\n      `/process/${filename}`,\r\n      {\r\n        method: \"POST\",\r\n        body: JSON.stringify(request),\r\n      }\r\n    );\r\n  }\r\n\r\n  async getProcessingStatus(taskId: string): Promise<ProcessingStatus> {\r\n    return this.request<ProcessingStatus>(`/status/${taskId}`);\r\n  }\r\n\r\n  async downloadResult(filename: string): Promise<Blob> {\r\n    const response = await fetch(`${this.baseUrl}/download/${filename}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Download failed: ${response.statusText}`);\r\n    }\r\n\r\n    return response.blob();\r\n  }\r\n\r\n  async cleanupFiles(): Promise<{ message: string }> {\r\n    return this.request<{ message: string }>(\"/cleanup\", {\r\n      method: \"DELETE\",\r\n    });\r\n  }\r\n\r\n  async healthCheck(): Promise<{ status: string; timestamp: string }> {\r\n    return this.request<{ status: string; timestamp: string }>(\"/health\");\r\n  }\r\n\r\n  // Voice Models API methods\r\n  async getTopVoiceModels(limit: number = 50): Promise<VoiceModelsResponse> {\r\n    return this.request<VoiceModelsResponse>(`/api/voice-models/top?limit=${limit}`);\r\n  }\r\n\r\n  async searchVoiceModels(query: string, limit: number = 20): Promise<SearchResponse> {\r\n    return this.request<SearchResponse>(`/api/voice-models/search?query=${encodeURIComponent(query)}&limit=${limit}`);\r\n  }\r\n\r\n  async getRickSanchezModels(): Promise<VoiceModelsResponse> {\r\n    return this.request<VoiceModelsResponse>(\"/api/voice-models/rick-sanchez\");\r\n  }\r\n\r\n  async getFeaturedVoiceModels(): Promise<VoiceModelsResponse> {\r\n    return this.request<VoiceModelsResponse>(\"/api/voice-models/featured\");\r\n  }\r\n\r\n  async getVoiceModelCategories(): Promise<CategoriesResponse> {\r\n    return this.request<CategoriesResponse>(\"/api/voice-models/categories\");\r\n  }\r\n}\r\n\r\nexport const apiClient = new ApiClient();\r\nexport default apiClient;\r\n"],
  "mappings": ";;;;;AAEA,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AAGA,IAAM,eAAe;AAkErB,IAAM,YAAN,MAAgB;AAAA,EACN;AAAA,EAER,YAAY,UAAkB,cAAc;AAC1C,SAAK,UAAU;AAAA,EACjB;AAAA,EAEA,MAAc,QACZ,UACA,UAAuB,CAAC,GACZ;AACZ,UAAM,MAAM,GAAG,KAAK,UAAU;AAE9B,UAAM,WAAW,MAAM,MAAM,KAAK;AAAA,MAChC,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,GAAG,QAAQ;AAAA,MACb;AAAA,MACA,GAAG;AAAA,IACL,CAAC;AAED,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,IAAI,MAAM,uBAAuB,SAAS,YAAY;AAAA,IAC9D;AAEA,WAAO,SAAS,KAAK;AAAA,EACvB;AAAA,EAEA,MAAM,YAAY,MAAqC;AACrD,UAAM,WAAW,IAAI,SAAS;AAC9B,aAAS,OAAO,QAAQ,IAAI;AAE5B,UAAM,WAAW,MAAM,MAAM,GAAG,KAAK,kBAAkB;AAAA,MACrD,QAAQ;AAAA,MACR,MAAM;AAAA,IACR,CAAC;AAED,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,IAAI,MAAM,kBAAkB,SAAS,YAAY;AAAA,IACzD;AAEA,WAAO,SAAS,KAAK;AAAA,EACvB;AAAA,EAEA,MAAM,YAA0C;AAC9C,WAAO,KAAK,QAA6B,SAAS;AAAA,EACpD;AAAA,EAEA,MAAM,aACJ,UACA,SAC8C;AAC9C,WAAO,KAAK;AAAA,MACV,YAAY;AAAA,MACZ;AAAA,QACE,QAAQ;AAAA,QACR,MAAM,KAAK,UAAU,OAAO;AAAA,MAC9B;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,oBAAoB,QAA2C;AACnE,WAAO,KAAK,QAA0B,WAAW,QAAQ;AAAA,EAC3D;AAAA,EAEA,MAAM,eAAe,UAAiC;AACpD,UAAM,WAAW,MAAM,MAAM,GAAG,KAAK,oBAAoB,UAAU;AAEnE,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,IAAI,MAAM,oBAAoB,SAAS,YAAY;AAAA,IAC3D;AAEA,WAAO,SAAS,KAAK;AAAA,EACvB;AAAA,EAEA,MAAM,eAA6C;AACjD,WAAO,KAAK,QAA6B,YAAY;AAAA,MACnD,QAAQ;AAAA,IACV,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,cAA8D;AAClE,WAAO,KAAK,QAA+C,SAAS;AAAA,EACtE;AAAA;AAAA,EAGA,MAAM,kBAAkB,QAAgB,IAAkC;AACxE,WAAO,KAAK,QAA6B,+BAA+B,OAAO;AAAA,EACjF;AAAA,EAEA,MAAM,kBAAkB,OAAe,QAAgB,IAA6B;AAClF,WAAO,KAAK,QAAwB,kCAAkC,mBAAmB,KAAK,WAAW,OAAO;AAAA,EAClH;AAAA,EAEA,MAAM,uBAAqD;AACzD,WAAO,KAAK,QAA6B,gCAAgC;AAAA,EAC3E;AAAA,EAEA,MAAM,yBAAuD;AAC3D,WAAO,KAAK,QAA6B,4BAA4B;AAAA,EACvE;AAAA,EAEA,MAAM,0BAAuD;AAC3D,WAAO,KAAK,QAA4B,8BAA8B;AAAA,EACxE;AACF;AAEO,IAAM,YAAY,IAAI,UAAU;",
  "names": []
}
